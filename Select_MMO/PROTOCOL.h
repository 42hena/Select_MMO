#ifndef __PROTOCOL_H__
#define __PROTOCOL_H__

//---------------------------------------------------------------
// 패킷헤더.
//---------------------------------------------------------------
/*
	SHORT	bySize;			// 패킷 사이즈.
	SHORT	byType;			// 패킷타입.
*/

//---------------------------------------------------------------
// Server To Client로 보내는 프로토콜
//---------------------------------------------------------------
enum en_ServerToClientProtocol
{
	SERVER_TO_CLIENT_CREATE_MY_CHARACTER = 0,
	//---------------------------------------------------------------
	// 접속 클라이언트 캐릭터 할당
	//---------------------------------------------------------------
	// 서버 접속 시 최초로 받게되는 패킷.
	// ID 와 자신의 시작 위치, HP 를 받게 된다.
	// 
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//	1	-	HP
	//---------------------------------------------------------------
	
	SERVER_TO_CLIENT_CREATE_OTHER_CHARACTER = 1,
	//---------------------------------------------------------------
	// 다른 클라이언트의 캐릭터 생성 패킷
	//---------------------------------------------------------------
	// 서버 접속 시 생성 위치의 주변에 있던 캐릭터들의 정보
	// 또는 게임 중에 접속된 클라이언트들의 생성용 정보.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//	1	-	HP
	//---------------------------------------------------------------
	
	SERVER_TO_CLIENT_DELETE_CHARACTER = 2,
	//---------------------------------------------------------------
	// 캐릭터 삭제 패킷
	//---------------------------------------------------------------
	// 캐릭터의 접속해제 또는 캐릭터가 죽었을때 전송됨.
	//
	// Parameter
	//	4	-	ID
	//---------------------------------------------------------------

	SERVER_TO_CLIENT_MOVE_START = 11,
	//---------------------------------------------------------------
	// 캐릭터 이동시작 패킷
	//---------------------------------------------------------------
	// 다른 유저의 캐릭터 이동시 본 패킷을 받는다.
	// 패킷 수신시 해당 캐릭터를 찾아 이동처리를 해주도록 한다.
	// 
	// 패킷 수신 시 해당 키가 계속해서 눌린것으로 생각하고
	// 해당 방향으로 계속 이동을 하고 있어야만 한다.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값 8방향 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	SERVER_TO_CLIENT_MOVE_STOP = 13,
	//---------------------------------------------------------------
	// 캐릭터 이동중지 패킷
	//---------------------------------------------------------------
	// ID 에 해당하는 캐릭터가 이동을 멈춘것이므로 
	// 캐릭터를 찾아서 방향과, 좌표를 입력해주고 멈추도록 처리한다.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	SERVER_TO_CLIENT_ATTACK1 = 21,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷
	//---------------------------------------------------------------
	// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y

	SERVER_TO_CLIENT_ATTACK2 = 23,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Server -> Client
	//---------------------------------------------------------------
	// 패킷 수신시 해당 캐릭터를 찾아서 공격2번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------

	SERVER_TO_CLIENT_ATTACK3 = 25,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷
	//---------------------------------------------------------------
	// 패킷 수신시 해당 캐릭터를 찾아서 공격3번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	// Parameter
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------


	SERVER_TO_CLIENT_DAMAGE = 30,
	//---------------------------------------------------------------
	// 캐릭터 데미지 패킷
	//---------------------------------------------------------------
	// 공격에 맞은 캐릭터의 정보를 보냄.
	//
	// Parameter
	//	4	-	AttackID	( 공격자 ID )
	//	4	-	DamageID	( 피해자 ID )
	//	1	-	DamageHP	( 피해자 HP )
	//---------------------------------------------------------------


	SERVER_TO_CLIENT_SYNC = 251,
	//---------------------------------------------------------------
	// 동기화를 위한 패킷
	//---------------------------------------------------------------
	// 서버로부터 동기화 패킷을 받으면 해당 캐릭터를 찾아서
	// 캐릭터 좌표를 보정해준다.
	//
	// Parameter
	//	4	-	ID
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	SERVER_TO_CLIENT_ECHO = 253,
	//---------------------------------------------------------------
	// Echo 응답 패킷
	//---------------------------------------------------------------
	// Parameter
	//	4	-	Time
	//---------------------------------------------------------------
};

//---------------------------------------------------------------
// Client To Server로 보내는 프로토콜
//---------------------------------------------------------------
enum en_ClientToServerProtocol
{
	CLIENT_TO_SERVER_MOVE_START = 10,
	//---------------------------------------------------------------
	// 캐릭터 이동시작 패킷						Client -> Server
	//---------------------------------------------------------------
	// 자신의 캐릭터 이동시작시 이 패킷을 보낸다.
	// 이동 중에는 본 패킷을 보내지 않으며, 키 입력이 변경되었을 경우에만
	// 보내줘야 한다.
	//
	// (왼쪽 이동중 위로 이동 / 왼쪽 이동중 왼쪽 위로 이동... 등등)
	//
	// Parameter
	//	1	-	Direction	( 방향 디파인 값 8방향 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	CLIENT_TO_SERVER_MOVE_STOP = 12,
	//---------------------------------------------------------------
	// 캐릭터 이동중지 패킷						Client -> Server
	//
	// 이동중 키보드 입력이 없어서 정지되었을 때, 이 패킷을 서버에 보내준다.
	// 이동중 방향 전환시에는 스탑을 보내지 않는다.
	//
	//	1	-	Direction	( 방향 디파인 값 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	CLIENT_TO_SERVER_ATTACK1 = 20,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Client -> Server
	//---------------------------------------------------------------
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y	
	//
	//---------------------------------------------------------------
	
	CLIENT_TO_SERVER_ATTACK2 = 22,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Client -> Server
	//
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------
	
	CLIENT_TO_SERVER_ATTACK3 = 24,
	//---------------------------------------------------------------
	// 캐릭터 공격 패킷
	//---------------------------------------------------------------
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	// ---------------------------------------------------------------
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//---------------------------------------------------------------

	CLIENT_TO_SERVER_ECHO = 252,
	//---------------------------------------------------------------
	// Echo 용 패킷
	//---------------------------------------------------------------
	// RTT 계산용 패킷
	// 
	// Parameter
	//	4	-	Time
	//---------------------------------------------------------------

};

//---------------------------------------------------------------
// 케릭터 방향 정보
//---------------------------------------------------------------
enum en_MoveDirection
{
	MOVE_DIR_LL	= 0, //   서쪽 방향
	MOVE_DIR_LU	= 1, // 북서쪽 방향
	MOVE_DIR_UU = 2, //   북쪽 방향
	MOVE_DIR_RU = 3, // 북동쪽 방향
	MOVE_DIR_RR = 4, //   동쪽 방향
	MOVE_DIR_RD = 5, // 남동쪽 방향
	MOVE_DIR_DD = 6, //   남쪽 방향
	MOVE_DIR_LD = 7, // 남서쪽 방향
	MOVE_DIR_NONE = 8, // None
};

//---------------------------------------------------------------
// 공격범위.
//---------------------------------------------------------------
enum en_AttackRange
{
	ATTACK1_RANGE_Y = 10,
	ATTACK2_RANGE_Y = 10,
	ATTACK3_RANGE_Y = 20,
	ATTACK1_RANGE_X = 80,
	ATTACK2_RANGE_X = 90,
	ATTACK3_RANGE_X = 100,
};

//---------------------------------------------------------------
// 공격 데미지.
//---------------------------------------------------------------
enum en_AttackDamage
{
	ATTACK1_DAMAGE = 1,
	ATTACK2_DAMAGE = 2,
	ATTACK3_DAMAGE = 3,
};

//-----------------------------------------------------------------
// 캐릭터 이동 속도
//-----------------------------------------------------------------
enum en_CharacterSpeed
{
	SPEED_PLAYER_Y = 4,
	SPEED_PLAYER_X = 6,
};

//-----------------------------------------------------------------
// Error 사항
//-----------------------------------------------------------------
enum en_Error
{
	ERROR_RANGE	= 50, // 이동 오류체크 범위
	ERROR_NETWORK_PACKET_RECV_TIMEOUT = 30000, // 30초 이상이 되도록 아무런 메시지 수신도 없는경우 접속 끊음.
};

//-----------------------------------------------------------------
// 맵 정보
//-----------------------------------------------------------------
enum en_MapInfo
{
	RANGE_MOVE_TOP = 0,
	RANGE_MOVE_LEFT = 0,
	RANGE_MOVE_RIGHT = 6400,
	RANGE_MOVE_BOTTOM = 6400,
};

//-----------------------------------------------------------------
// 섹터 정보
//-----------------------------------------------------------------
enum en_SectorInfo
{
	SECTOR_MAX_Y = 200,
	SECTOR_MAX_X = 200,
};

#endif
